/*
 * Copyright 2023 gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.gematik.dsr.gms.application;

import de.gematik.dsr.gms.application.exception.ServiceExceptionReason;
import jakarta.ws.rs.core.Response;

public interface Validation<T, R> {

  /**
   * Executes verification of data and returns processed data, if they were converted to another
   * type, or original validated data, if everything was correct.
   *
   * @param dataToValidate data to be verified.
   * @return processed data.
   * @throws de.gematik.dsr.gms.application.exception.GMServiceRuntimeException if data is not
   *     valid.
   */
  R evaluate(T dataToValidate);

  enum ValidationExceptionReason implements ServiceExceptionReason {
    NOT_PARSABLE_CERTIFICATE_CHAIN("Impossible to parse certificate chain"),
    INVALID_CERTIFICATE_CHAIN("Invalid certificate chain."),
    FINGERPRINT_COMPARISON_FAILURE("Device key is not equivalent to the one from certificate"),
    INVALID_ROOT_CERTIFICATE(
        "The root certificate is NOT correct. The attestation was probably generated by software,"
            + " not in secure hardware."),
    MISSING_CERTIFICATE_EXTENSION_VALUE("No extension value found under expected OID."),
    NOT_PARSABLE_EXTENSION_VALUE("Extension value can't be parsed to expected sequence."),
    REVOKE_LIST_ENTRY("One of certificates inside of chain was revoked."),
    INVALID_CERTIFICATE_CHAIN_PATH("Validating of certificate chain path failed."),

    MISSING_X509_TRUST_MANAGER("X509TrustManager is not found.");

    private final String description;

    ValidationExceptionReason(String description) {
      this.description = description;
    }

    @Override
    public String getDescription() {
      return description;
    }

    @Override
    public Response.Status getStatus() {
      return Response.Status.BAD_REQUEST;
    }
  }
}
